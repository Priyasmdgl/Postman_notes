{
	"info": {
		"_postman_id": "75a0445b-4022-4440-bc13-aaee2d19f0c0",
		"name": "training 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37621942"
	},
	"item": [
		{
			"name": "Importing data from external json file",
			"item": [
				{
					"name": "json data",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"first_name\": \"{{first_name}}\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "csv data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"first_name\": \"{{first_name}}\",\r\n      \"last_name\": \"{{last_name}}\",\r\n      \"year\": {{year}}\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Test scripts for csv data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Body contains first_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mno\");\r",
									"});\r",
									"pm.test(\"year\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.year).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"first_name\": \"{{first_name}}\",\r\n      \"last_name\": \"{{last_name}}\",\r\n      \"year\": {{year}}\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HTTP Methods",
			"item": [
				{
					"name": "To list students",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "To fetch specific user",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/students/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "To create a student",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"first_name\": \"Magu\",\r\n      \"last_name\": \"M\",\r\n      \"year\": \"4\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "To check the created user using post",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/students/d5c8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"d5c8"
							]
						}
					},
					"response": []
				},
				{
					"name": "To update something in a request",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"id\": 3,\r\n      \"first_name\": \"Jayanthi\",\r\n      \"last_name\": \"P\",\r\n      \"year\": \"3\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.google.com/search?q=create+rest+api+json+server&rlz=1C1RXQR_enIN1091IN1091&oq=&gs_lcrp=EgZjaHJvbWUqCQgEEEUYOxjCAzIJCAAQRRg7GMIDMgkIARBFGDsYwgMyCQgCEEUYOxjCAzIJCAMQRRg7GMIDMgkIBBBFGDsYwgMyCQgFEEUYOxjCAzIJCAYQRRg7GMIDMgkIBxBFGDsYwgPSAQs1NzEzNDk0ajBqN6gCCLACAQ&sourceid=chrome&ie=UTF-8#cobssid=s",
							"protocol": "https",
							"host": [
								"www",
								"google",
								"com"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "create+rest+api+json+server"
								},
								{
									"key": "rlz",
									"value": "1C1RXQR_enIN1091IN1091"
								},
								{
									"key": "oq",
									"value": ""
								},
								{
									"key": "gs_lcrp",
									"value": "EgZjaHJvbWUqCQgEEEUYOxjCAzIJCAAQRRg7GMIDMgkIARBFGDsYwgMyCQgCEEUYOxjCAzIJCAMQRRg7GMIDMgkIBBBFGDsYwgMyCQgFEEUYOxjCAzIJCAYQRRg7GMIDMgkIBxBFGDsYwgPSAQs1NzEzNDk0ajBqN6gCCLACAQ"
								},
								{
									"key": "sourceid",
									"value": "chrome"
								},
								{
									"key": "ie",
									"value": "UTF-8"
								}
							],
							"hash": "cobssid=s"
						}
					},
					"response": []
				},
				{
					"name": "Copy parameters from another request using bulk edit option",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.google.com/search?q=create+rest+api+json+server&rlz=1C1RXQR_enIN1091IN1091&oq=&gs_lcrp=EgZjaHJvbWUqCQgEEEUYOxjCAzIJCAAQRRg7GMIDMgkIARBFGDsYwgMyCQgCEEUYOxjCAzIJCAMQRRg7GMIDMgkIBBBFGDsYwgMyCQgFEEUYOxjCAzIJCAYQRRg7GMIDMgkIBxBFGDsYwgPSAQs1NzEzNDk0ajBqN6gCCLACAQ&sourceid=chrome&ie=UTF-8",
							"protocol": "https",
							"host": [
								"www",
								"google",
								"com"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "create+rest+api+json+server"
								},
								{
									"key": "rlz",
									"value": "1C1RXQR_enIN1091IN1091"
								},
								{
									"key": "oq",
									"value": ""
								},
								{
									"key": "gs_lcrp",
									"value": "EgZjaHJvbWUqCQgEEEUYOxjCAzIJCAAQRRg7GMIDMgkIARBFGDsYwgMyCQgCEEUYOxjCAzIJCAMQRRg7GMIDMgkIBBBFGDsYwgMyCQgFEEUYOxjCAzIJCAYQRRg7GMIDMgkIBxBFGDsYwgPSAQs1NzEzNDk0ajBqN6gCCLACAQ"
								},
								{
									"key": "sourceid",
									"value": "chrome"
								},
								{
									"key": "ie",
									"value": "UTF-8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "To delete a student",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/students/3ae5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"3ae5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "basic auth",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password",
									"type": "string"
								},
								{
									"key": "username",
									"value": "postman",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/basic-auth",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"basic-auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get request using env variable",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password",
									"type": "string"
								},
								{
									"key": "username",
									"value": "postman",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-{{domain}}.com/basic-auth",
							"protocol": "https",
							"host": [
								"postman-{{domain}}",
								"com"
							],
							"path": [
								"basic-auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "digest auth to authorize a secured resource using realm,nonce and qop",
					"request": {
						"auth": {
							"type": "digest",
							"digest": [
								{
									"key": "disableRetryRequest",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "qop",
									"value": "auth",
									"type": "string"
								},
								{
									"key": "nonce",
									"value": "S2i6sOW93oAtUl9UKbB87eNP7zpTecFK",
									"type": "string"
								},
								{
									"key": "realm",
									"value": "Users",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								},
								{
									"key": "username",
									"value": "postman",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "MD5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/digest-auth",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"digest-auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization using API key",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "0188faf0c21f12091deb6a4bdba787f0",
									"type": "string"
								},
								{
									"key": "key",
									"value": "appid",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.openweathermap.org/data/2.5/weather?lat=44.34&lon=10.99&appid=0188faf0c21f12091deb6a4bdba787f0",
							"protocol": "https",
							"host": [
								"api",
								"openweathermap",
								"org"
							],
							"path": [
								"data",
								"2.5",
								"weather"
							],
							"query": [
								{
									"key": "lat",
									"value": "44.34"
								},
								{
									"key": "lon",
									"value": "10.99"
								},
								{
									"key": "appid",
									"value": "0188faf0c21f12091deb6a4bdba787f0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "bearer token to authorize secured resources",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "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",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/user/repos",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "OAuth 2.0",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientSecret",
									"value": "23e74a2941abe7a0f219e748ea4b7827e16d5d99",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "6e94e54190dee95",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://api.imgur.com/oauth2/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://api.imgur.com/oauth2/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "Imgur",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "EPGdQVt7-/Capture.PNG"
							}
						},
						"url": {
							"raw": "https://api.imgur.com/upload",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"upload"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test",
			"item": [
				{
					"name": "Test scripts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax error by adding closing parenthesis\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Body matches first_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Priya\");\r",
									"});\r",
									"pm.test(\"Body matches first_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Tobias\");\r",
									"});\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"console.log(pm.globals.get(\"base\"));\r",
									"pm.globals.set(\"url\", \"bing\");\r",
									"pm.globals.unset(\"url\");\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"pm.test(\"Cookie is present\", function () {\r",
									"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", function () {\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.data[0].first_name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data[0].last_name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
									"});\r",
									"pm.test(\"Test array properties\", function () {\r",
									"    pm.expect(jsonData.data[0],[1],[2],[3],[4],[5]).to.have.property('first_name');\r",
									"    pm.expect(jsonData.data[0],[1],[2],[3],[4],[5]).to.have.property('last_name');\r",
									"    pm.expect(jsonData.data[0],[1],[2],[3],[4],[5]).to.have.property('id');\r",
									"    pm.expect(jsonData.data[0],[1],[2],[3],[4],[5]).to.have.property('email');\r",
									"});\r",
									"pm.test(\"Value of the fields\", function () {\r",
									"    pm.expect(jsonData.data[0].first_name).to.eql(\"Michael\");\r",
									"    pm.expect(jsonData.data[0].last_name).to.eql(\"Lawson\");\r",
									"    pm.expect(jsonData.data[0].id).to.equal(7);\r",
									"});\r",
									"var schema = {\r",
									"    \"title\": \"Root Schema\",\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"page\",\r",
									"        \"per_page\",\r",
									"        \"total\",\r",
									"        \"total_pages\",\r",
									"        \"data\",\r",
									"        \"support\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"page\": {\r",
									"            \"title\": \"The page Schema\",\r",
									"            \"type\": \"integer\",\r",
									"            \"examples\": [\r",
									"                2\r",
									"            ]\r",
									"        },\r",
									"        \"per_page\": {\r",
									"            \"title\": \"The per_page Schema\",\r",
									"            \"type\": \"integer\",\r",
									"            \"examples\": [\r",
									"                6\r",
									"            ]\r",
									"        },\r",
									"        \"total\": {\r",
									"            \"title\": \"The total Schema\",\r",
									"            \"type\": \"integer\",\r",
									"            \"examples\": [\r",
									"                12\r",
									"            ]\r",
									"        },\r",
									"        \"total_pages\": {\r",
									"            \"title\": \"The total_pages Schema\",\r",
									"            \"type\": \"integer\",\r",
									"            \"examples\": [\r",
									"                2\r",
									"            ]\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"title\": \"The data Schema\",\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"title\": \"A Schema\",\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"email\",\r",
									"                    \"first_name\",\r",
									"                    \"last_name\",\r",
									"                    \"avatar\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"title\": \"The id Schema\",\r",
									"                        \"type\": \"integer\",\r",
									"                        \"examples\": [\r",
									"                            7,\r",
									"                            8,\r",
									"                            9,\r",
									"                            10,\r",
									"                            11,\r",
									"                            12\r",
									"                        ]\r",
									"                    },\r",
									"                    \"email\": {\r",
									"                        \"title\": \"The email Schema\",\r",
									"                        \"type\": \"string\",\r",
									"                        \"examples\": [\r",
									"                            \"michael.lawson@reqres.in\",\r",
									"                            \"lindsay.ferguson@reqres.in\",\r",
									"                            \"tobias.funke@reqres.in\",\r",
									"                            \"byron.fields@reqres.in\",\r",
									"                            \"george.edwards@reqres.in\",\r",
									"                            \"rachel.howell@reqres.in\"\r",
									"                        ]\r",
									"                    },\r",
									"                    \"first_name\": {\r",
									"                        \"title\": \"The first_name Schema\",\r",
									"                        \"type\": \"string\",\r",
									"                        \"examples\": [\r",
									"                            \"Michael\",\r",
									"                            \"Lindsay\",\r",
									"                            \"Tobias\",\r",
									"                            \"Byron\",\r",
									"                            \"George\",\r",
									"                            \"Rachel\"\r",
									"                        ]\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"title\": \"The last_name Schema\",\r",
									"                        \"type\": \"string\",\r",
									"                        \"examples\": [\r",
									"                            \"Lawson\",\r",
									"                            \"Ferguson\",\r",
									"                            \"Funke\",\r",
									"                            \"Fields\",\r",
									"                            \"Edwards\",\r",
									"                            \"Howell\"\r",
									"                        ]\r",
									"                    },\r",
									"                    \"avatar\": {\r",
									"                        \"title\": \"The avatar Schema\",\r",
									"                        \"type\": \"string\",\r",
									"                        \"examples\": [\r",
									"                            \"https://reqres.in/img/faces/7-image.jpg\",\r",
									"                            \"https://reqres.in/img/faces/8-image.jpg\",\r",
									"                            \"https://reqres.in/img/faces/9-image.jpg\",\r",
									"                            \"https://reqres.in/img/faces/10-image.jpg\",\r",
									"                            \"https://reqres.in/img/faces/11-image.jpg\",\r",
									"                            \"https://reqres.in/img/faces/12-image.jpg\"\r",
									"                        ]\r",
									"                    }\r",
									"                },\r",
									"                \"examples\": [{\r",
									"                    \"id\": 7,\r",
									"                    \"email\": \"michael.lawson@reqres.in\",\r",
									"                    \"first_name\": \"Michael\",\r",
									"                    \"last_name\": \"Lawson\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/7-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 8,\r",
									"                    \"email\": \"lindsay.ferguson@reqres.in\",\r",
									"                    \"first_name\": \"Lindsay\",\r",
									"                    \"last_name\": \"Ferguson\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/8-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 9,\r",
									"                    \"email\": \"tobias.funke@reqres.in\",\r",
									"                    \"first_name\": \"Tobias\",\r",
									"                    \"last_name\": \"Funke\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/9-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 10,\r",
									"                    \"email\": \"byron.fields@reqres.in\",\r",
									"                    \"first_name\": \"Byron\",\r",
									"                    \"last_name\": \"Fields\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/10-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 11,\r",
									"                    \"email\": \"george.edwards@reqres.in\",\r",
									"                    \"first_name\": \"George\",\r",
									"                    \"last_name\": \"Edwards\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/11-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 12,\r",
									"                    \"email\": \"rachel.howell@reqres.in\",\r",
									"                    \"first_name\": \"Rachel\",\r",
									"                    \"last_name\": \"Howell\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/12-image.jpg\"\r",
									"                }]\r",
									"            },\r",
									"            \"examples\": [\r",
									"                [{\r",
									"                    \"id\": 7,\r",
									"                    \"email\": \"michael.lawson@reqres.in\",\r",
									"                    \"first_name\": \"Michael\",\r",
									"                    \"last_name\": \"Lawson\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/7-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 8,\r",
									"                    \"email\": \"lindsay.ferguson@reqres.in\",\r",
									"                    \"first_name\": \"Lindsay\",\r",
									"                    \"last_name\": \"Ferguson\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/8-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 9,\r",
									"                    \"email\": \"tobias.funke@reqres.in\",\r",
									"                    \"first_name\": \"Tobias\",\r",
									"                    \"last_name\": \"Funke\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/9-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 10,\r",
									"                    \"email\": \"byron.fields@reqres.in\",\r",
									"                    \"first_name\": \"Byron\",\r",
									"                    \"last_name\": \"Fields\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/10-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 11,\r",
									"                    \"email\": \"george.edwards@reqres.in\",\r",
									"                    \"first_name\": \"George\",\r",
									"                    \"last_name\": \"Edwards\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/11-image.jpg\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\": 12,\r",
									"                    \"email\": \"rachel.howell@reqres.in\",\r",
									"                    \"first_name\": \"Rachel\",\r",
									"                    \"last_name\": \"Howell\",\r",
									"                    \"avatar\": \"https://reqres.in/img/faces/12-image.jpg\"\r",
									"                }]\r",
									"            ]\r",
									"        },\r",
									"        \"support\": {\r",
									"            \"title\": \"The support Schema\",\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"url\",\r",
									"                \"text\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"url\": {\r",
									"                    \"title\": \"The url Schema\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"examples\": [\r",
									"                        \"https://reqres.in/#support-heading\"\r",
									"                    ]\r",
									"                },\r",
									"                \"text\": {\r",
									"                    \"title\": \"The text Schema\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"examples\": [\r",
									"                        \"To keep ReqRes free, contributions towards server costs are appreciated!\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"examples\": [{\r",
									"                \"url\": \"https://reqres.in/#support-heading\",\r",
									"                \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\r",
									"            }]\r",
									"        }\r",
									"    },\r",
									"    \"examples\": [{\r",
									"        \"page\": 2,\r",
									"        \"per_page\": 6,\r",
									"        \"total\": 12,\r",
									"        \"total_pages\": 2,\r",
									"        \"data\": [{\r",
									"            \"id\": 7,\r",
									"            \"email\": \"michael.lawson@reqres.in\",\r",
									"            \"first_name\": \"Michael\",\r",
									"            \"last_name\": \"Lawson\",\r",
									"            \"avatar\": \"https://reqres.in/img/faces/7-image.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 8,\r",
									"            \"email\": \"lindsay.ferguson@reqres.in\",\r",
									"            \"first_name\": \"Lindsay\",\r",
									"            \"last_name\": \"Ferguson\",\r",
									"            \"avatar\": \"https://reqres.in/img/faces/8-image.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 9,\r",
									"            \"email\": \"tobias.funke@reqres.in\",\r",
									"            \"first_name\": \"Tobias\",\r",
									"            \"last_name\": \"Funke\",\r",
									"            \"avatar\": \"https://reqres.in/img/faces/9-image.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 10,\r",
									"            \"email\": \"byron.fields@reqres.in\",\r",
									"            \"first_name\": \"Byron\",\r",
									"            \"last_name\": \"Fields\",\r",
									"            \"avatar\": \"https://reqres.in/img/faces/10-image.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 11,\r",
									"            \"email\": \"george.edwards@reqres.in\",\r",
									"            \"first_name\": \"George\",\r",
									"            \"last_name\": \"Edwards\",\r",
									"            \"avatar\": \"https://reqres.in/img/faces/11-image.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 12,\r",
									"            \"email\": \"rachel.howell@reqres.in\",\r",
									"            \"first_name\": \"Rachel\",\r",
									"            \"last_name\": \"Howell\",\r",
									"            \"avatar\": \"https://reqres.in/img/faces/12-image.jpg\"\r",
									"        }],\r",
									"        \"support\": {\r",
									"            \"url\": \"https://reqres.in/#support-heading\",\r",
									"            \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\r",
									"        }\r",
									"    }]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Request chaining",
			"item": [
				{
					"name": "Create student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();\r",
									"var id = responseJson.id;\r",
									"pm.Variables.set(\"student\", id);\r",
									"console.log(id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"first_name\": \"Mahesh\",\r\n      \"last_name\": \"Pandi\",\r\n      \"year\": \"1\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch the created student",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/students/{{student}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"{{student}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Request chaining using Go rest api",
			"item": [
				{
					"name": "Post request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();\r",
									"var id = responseJson.id;\r",
									"pm.collectionVariables.set(\"cid\", id);\r",
									"console.log(id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"{{$randomFullName}}\",\r\n\"gender\":\"Female\", \r\n\"email\":\"{{$randomEmail}}\", \r\n\"status\":\"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.gender).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{cid}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{cid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put request",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"Raghav\",\r\n\"gender\":\"male\", \r\n\"email\":\"raghav@gmail.com\", \r\n\"status\":\"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{cid}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{cid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch request",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"email\":\"{{$randomEmail}}\", \r\n\"status\":\"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{cid}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{cid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"cid\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{cid}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{cid}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "0ee9f1f4a48fdc2148787e0ad9c042980491fd841d2c6f19a5f124663768497e",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "student",
			"value": ""
		}
	]
}